package com.atanana

import com.atanana.MessageComposerImpl.{alarms, timePattern}
import com.atanana.data.*

import java.time.format.DateTimeFormatter
import java.time.{DayOfWeek, LocalDate}
import java.util.Locale
import scala.language.implicitConversions
import scala.util.Random

class MessageComposerImpl extends MessageComposer {
  override def composeNewResult(data: TournamentData): String = {
    s"–í–æ–∑–¥—Ä–æ—á–∏–º –∂–µ! –ù–∞ —Ç—É—Ä–Ω–∏—Ä–µ [${data.name}](${data.link}) ${scoreDescription(data.bonus)}. –ü–æ –∏—Ç–æ–≥–∞–º –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω—è–ª–∞ *${printPlace(data.place)}* " +
      s"–º–µ—Å—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∞ *${data.bonus}* —Ä–µ–π—Ç–∞."
  }

  private def scoreDescription(score: Int): String = score match {
    case _ if score < -100 => "–º—ã —Å–æ—Å–Ω—É–ª–∏ –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞"
    case _ if score < -50 => "–Ω–∞—Å –∫—Ä–µ–ø–∫–æ –ø–æ–∏–º–µ–ª–∏"
    case _ if score < -25 => "–Ω–∞—Å —Å–ª–µ–≥–∫–∞ –ø–æ–∏–º–µ–ª–∏"
    case _ if score < 0 => "–º—ã –ø–ª–æ—Ö–æ–≤–∞—Ç–æ —Å—ã–≥—Ä–∞–ª–∏"
    case 0 => "–º—ã —Å—ã–≥—Ä–∞–ª–∏ —Ä–æ–≤–Ω–æ"
    case _ if score > 100 => "–º—ã –≤–∏–¥–∏–º–æ –∫–æ–º—É-—Ç–æ –∑–∞–ø–ª–∞—Ç–∏–ª–∏"
    case _ if score > 50 => "–º—ã —Å—ã–≥—Ä–∞–ª–∏ —Ö–æ—Ä–æ—à–æ"
    case _ if score > 25 => "–º—ã –Ω–µ–ø–ª–æ—Ö–æ —Å—ã–≥—Ä–∞–ª–∏"
    case _ if score > 0 => "–Ω–∞–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≤–µ–∑–ª–æ"
  }

  private def printPlace(place: Float): String = {
    if place % 1 == 0 then {
      place.toInt.toString
    } else {
      place.toString
    }
  }

  override def composeNewRequisition(requisition: Requisition, editors: List[Editor]): String = {
    s"–ê –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –Ω–∞—Å –ø–æ–∏–º–µ—é—Ç –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º *${requisition.tournament}* –∫–æ—Ç–æ—Ä—ã–π " +
      s"—Å–æ—Å—Ç–æ–∏—Ç—Å—è *${requisition.dateTime.format(timePattern)}*. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${requisition.agent}." +
      s"\n–†–µ–¥–∞–∫—Ç–æ—Ä—ã: ${getEditorsString(editors)}\n*${requisition.questionsCount} –≤–æ–ø—Ä–æ—Å–æ–≤*"
  }

  private def getEditorsString(editors: List[Editor]) = {
    editors.map(_.data).mkString(", ")
  }

  override def composeRequisitionReminder(requisition: Requisition): String = {
    s"–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è –æ—á–µ—Ä–µ–¥–Ω–∞—è —Ä–µ–π—Ç–∏–Ω–≥-–æ—Ä–≥–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º *${requisition.tournament} (${requisition.questionsCount} –≤–æ–ø—Ä–æ—Å–æ–≤)*. " +
      s"–ö–æ–º–∞–Ω–¥–æ–≤–∞—Ç—å –ø–∞—Ä–∞–¥–æ–º –±—É–¥–µ—Ç ${requisition.agent}"
  }

  override def composeCancelledRequisition(requisition: Requisition): String = {
    randomAlarm + s"! ${requisition.agent} –≤—ë–ª —Å–µ–±—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∏ –ø–æ—Å–µ–º—É *${requisition.tournament}* –≤ " +
      s"*${requisition.dateTime.format(timePattern)}* –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è!"
  }

  private def randomAlarm: String = {
    alarms(Random.nextInt(alarms.size))
  }

  override def composeTeamPositionsMessage(info: TeamPositionsInfo): String = {
    s"""
       |–ù–µ–±–æ–ª—å—à–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –Ω–æ–≤–æ–º—É —Ä–µ–ª–∏–∑—É:
       |
       |üèÜ —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ ‚Äî *${info.currentRating}*
       |üèÜ –º–µ—Å—Ç–æ –ø–æ –≥–æ—Ä–æ–¥—É ‚Äî *${info.cityPosition}*
       |üèÜ –º–µ—Å—Ç–æ –ø–æ —Å—Ç—Ä–∞–Ω–µ ‚Äî *${info.countryPosition}*
       |üèÜ –º–µ—Å—Ç–æ –≤ –æ–±—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ ‚Äî *${info.currentPosition}*
       |üèÜ –¥–æ —Ç–æ–ø-100 –æ—Å—Ç–∞–ª–æ—Å—å ‚Äî *${info.top100ratingDifference}*
       |üèÜ ${targetCountryTeamMessage(info.targetCountryRatingTeam)}
       |üèÜ *${-info.overtakingCountryRatingTeam.ratingDifference}* –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ–º–∞–Ω–¥–µ *${printTeam(info.overtakingCountryRatingTeam)}* —á—Ç–æ–±—ã –¥–æ–≥–Ω–∞—Ç—å –Ω–∞—Å –ø–æ —Å—Ç—Ä–∞–Ω–µ
       |
       |${targetAllTeamMessage(info.targetAllRatingTeam)}
    """.stripMargin
  }

  private def targetCountryTeamMessage(teamOption: Option[TargetTeam]): String =
    teamOption.map(team => s"*${team.ratingDifference}* –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ ‚Äî *${printTeam(team)}*")
      .getOrElse("–º—ã –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Å—Ç—Ä–∞–Ω–µ! –ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –Ω–µ –æ–±–æ—Å—Ä–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ")

  private def targetAllTeamMessage(teamOption: Option[TargetTeam]): String =
    teamOption.map(team => s"–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –±—ã–ª–æ –±—ã –Ω–µ–ø–ª–æ—Ö–æ –æ–±–æ–π—Ç–∏ —Ö–æ—Ç—è –±—ã –∫–æ–º–∞–Ω–¥—É ${printTeam(team)}, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –æ—Å—Ç–∞–ª–æ—Å—å ${team.ratingDifference} –æ—á–∫–æ–≤")
      .getOrElse("–º—ã –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Å—Ç—Ä–∞–Ω–µ! –û—Ö—É–µ—Ç—å –ø—Ä–æ—Å—Ç–æ! –ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –Ω–µ –æ–±–æ—Å—Ä–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ")

  private def printTeam(team: TargetTeam): String = s"${team.name} (${team.city})"

  override def composeChangedResult(changedTournament: ChangedTournament): String = {
    val data = changedTournament.tournament
    val oldResult = changedTournament.oldScore
    s"–°–µ–≥–æ–¥–Ω—è ${currentDay()}, –∞ –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –¥—Ä–æ—á–∏—Ç—å –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥! –ù–∞ —Ç—É—Ä–Ω–∏—Ä–µ ${data.name} —É –Ω–∞—Å –±—ã–ª–æ $oldResult, " +
      s"–∞ —Å—Ç–∞–ª–æ ${data.questions} –≤–∑—è—Ç—ã—Ö. –ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${printPlace(data.place)} –º–µ—Å—Ç–æ –∏ ${data.bonus} —Ä–µ–π—Ç–∏–≥–∞. \n${data.link}"
  }

  override def currentDay(): String = LocalDate.now().getDayOfWeek match {
    case DayOfWeek.MONDAY => "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
    case DayOfWeek.TUESDAY => "–≤—Ç–æ—Ä–Ω–∏–∫"
    case DayOfWeek.WEDNESDAY => "—Å—Ä–µ–¥–∞"
    case DayOfWeek.THURSDAY => "—á–µ—Ç–≤–µ—Ä–≥"
    case DayOfWeek.FRIDAY => "–ø—è—Ç–Ω–∏—Ü–∞"
    case DayOfWeek.SATURDAY => "—Å—É–±–±–æ—Ç–∞"
    case DayOfWeek.SUNDAY => "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
  }
}

object MessageComposerImpl {
  val alarms: Seq[String] = List("–ê—Ö—Ç—É–Ω–≥", "–ê–ª—è—Ä–º", "–ë–∏–¥–∞-–±–∏–¥–∞", "–£—Å—ë –ø—Ä–æ–ø–∞–ª–æ")

  val timePattern: DateTimeFormatter = DateTimeFormatter.ofPattern("d MMMM yyyy HH:mm:ss", new Locale("ru"))
}